// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: assignment.proto

#ifndef PROTOBUF_assignment_2eproto__INCLUDED
#define PROTOBUF_assignment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class assignment;
class assignmentDefaultTypeInternal;
extern assignmentDefaultTypeInternal _assignment_default_instance_;
class ms_data;
class ms_dataDefaultTypeInternal;
extern ms_dataDefaultTypeInternal _ms_data_default_instance_;
class peak_p;
class peak_pDefaultTypeInternal;
extern peak_pDefaultTypeInternal _peak_p_default_instance_;
class spectra_p;
class spectra_pDefaultTypeInternal;
extern spectra_pDefaultTypeInternal _spectra_p_default_instance_;

namespace protobuf_assignment_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_assignment_2eproto

// ===================================================================

class peak_p : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peak_p) */ {
 public:
  peak_p();
  virtual ~peak_p();

  peak_p(const peak_p& from);

  inline peak_p& operator=(const peak_p& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const peak_p& default_instance();

  static inline const peak_p* internal_default_instance() {
    return reinterpret_cast<const peak_p*>(
               &_peak_p_default_instance_);
  }

  void Swap(peak_p* other);

  // implements Message ----------------------------------------------

  inline peak_p* New() const PROTOBUF_FINAL { return New(NULL); }

  peak_p* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const peak_p& from);
  void MergeFrom(const peak_p& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(peak_p* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double mz_value = 1;
  void clear_mz_value();
  static const int kMzValueFieldNumber = 1;
  double mz_value() const;
  void set_mz_value(double value);

  // double intensity = 2;
  void clear_intensity();
  static const int kIntensityFieldNumber = 2;
  double intensity() const;
  void set_intensity(double value);

  // @@protoc_insertion_point(class_scope:peak_p)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double mz_value_;
  double intensity_;
  mutable int _cached_size_;
  friend struct protobuf_assignment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class spectra_p : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:spectra_p) */ {
 public:
  spectra_p();
  virtual ~spectra_p();

  spectra_p(const spectra_p& from);

  inline spectra_p& operator=(const spectra_p& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const spectra_p& default_instance();

  static inline const spectra_p* internal_default_instance() {
    return reinterpret_cast<const spectra_p*>(
               &_spectra_p_default_instance_);
  }

  void Swap(spectra_p* other);

  // implements Message ----------------------------------------------

  inline spectra_p* New() const PROTOBUF_FINAL { return New(NULL); }

  spectra_p* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const spectra_p& from);
  void MergeFrom(const spectra_p& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(spectra_p* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .peak_p ions = 3;
  int ions_size() const;
  void clear_ions();
  static const int kIonsFieldNumber = 3;
  const ::peak_p& ions(int index) const;
  ::peak_p* mutable_ions(int index);
  ::peak_p* add_ions();
  ::google::protobuf::RepeatedPtrField< ::peak_p >*
      mutable_ions();
  const ::google::protobuf::RepeatedPtrField< ::peak_p >&
      ions() const;

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string spectra_name = 2;
  void clear_spectra_name();
  static const int kSpectraNameFieldNumber = 2;
  const ::std::string& spectra_name() const;
  void set_spectra_name(const ::std::string& value);
  #if LANG_CXX11
  void set_spectra_name(::std::string&& value);
  #endif
  void set_spectra_name(const char* value);
  void set_spectra_name(const char* value, size_t size);
  ::std::string* mutable_spectra_name();
  ::std::string* release_spectra_name();
  void set_allocated_spectra_name(::std::string* spectra_name);

  // @@protoc_insertion_point(class_scope:spectra_p)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::peak_p > ions_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr spectra_name_;
  mutable int _cached_size_;
  friend struct protobuf_assignment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ms_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ms_data) */ {
 public:
  ms_data();
  virtual ~ms_data();

  ms_data(const ms_data& from);

  inline ms_data& operator=(const ms_data& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ms_data& default_instance();

  static inline const ms_data* internal_default_instance() {
    return reinterpret_cast<const ms_data*>(
               &_ms_data_default_instance_);
  }

  void Swap(ms_data* other);

  // implements Message ----------------------------------------------

  inline ms_data* New() const PROTOBUF_FINAL { return New(NULL); }

  ms_data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ms_data& from);
  void MergeFrom(const ms_data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ms_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 idxes = 1;
  int idxes_size() const;
  void clear_idxes();
  static const int kIdxesFieldNumber = 1;
  ::google::protobuf::int32 idxes(int index) const;
  void set_idxes(int index, ::google::protobuf::int32 value);
  void add_idxes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      idxes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_idxes();

  // repeated .spectra_p data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::spectra_p& data(int index) const;
  ::spectra_p* mutable_data(int index);
  ::spectra_p* add_data();
  ::google::protobuf::RepeatedPtrField< ::spectra_p >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::spectra_p >&
      data() const;

  // @@protoc_insertion_point(class_scope:ms_data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > idxes_;
  mutable int _idxes_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::spectra_p > data_;
  mutable int _cached_size_;
  friend struct protobuf_assignment_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class assignment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:assignment) */ {
 public:
  assignment();
  virtual ~assignment();

  assignment(const assignment& from);

  inline assignment& operator=(const assignment& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const assignment& default_instance();

  static inline const assignment* internal_default_instance() {
    return reinterpret_cast<const assignment*>(
               &_assignment_default_instance_);
  }

  void Swap(assignment* other);

  // implements Message ----------------------------------------------

  inline assignment* New() const PROTOBUF_FINAL { return New(NULL); }

  assignment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const assignment& from);
  void MergeFrom(const assignment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(assignment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ms_data multi_dataset = 2;
  int multi_dataset_size() const;
  void clear_multi_dataset();
  static const int kMultiDatasetFieldNumber = 2;
  const ::ms_data& multi_dataset(int index) const;
  ::ms_data* mutable_multi_dataset(int index);
  ::ms_data* add_multi_dataset();
  ::google::protobuf::RepeatedPtrField< ::ms_data >*
      mutable_multi_dataset();
  const ::google::protobuf::RepeatedPtrField< ::ms_data >&
      multi_dataset() const;

  // int32 num_proc = 1;
  void clear_num_proc();
  static const int kNumProcFieldNumber = 1;
  ::google::protobuf::int32 num_proc() const;
  void set_num_proc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:assignment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ms_data > multi_dataset_;
  ::google::protobuf::int32 num_proc_;
  mutable int _cached_size_;
  friend struct protobuf_assignment_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// peak_p

// double mz_value = 1;
inline void peak_p::clear_mz_value() {
  mz_value_ = 0;
}
inline double peak_p::mz_value() const {
  // @@protoc_insertion_point(field_get:peak_p.mz_value)
  return mz_value_;
}
inline void peak_p::set_mz_value(double value) {
  
  mz_value_ = value;
  // @@protoc_insertion_point(field_set:peak_p.mz_value)
}

// double intensity = 2;
inline void peak_p::clear_intensity() {
  intensity_ = 0;
}
inline double peak_p::intensity() const {
  // @@protoc_insertion_point(field_get:peak_p.intensity)
  return intensity_;
}
inline void peak_p::set_intensity(double value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:peak_p.intensity)
}

// -------------------------------------------------------------------

// spectra_p

// string file_name = 1;
inline void spectra_p::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& spectra_p::file_name() const {
  // @@protoc_insertion_point(field_get:spectra_p.file_name)
  return file_name_.GetNoArena();
}
inline void spectra_p::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spectra_p.file_name)
}
#if LANG_CXX11
inline void spectra_p::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spectra_p.file_name)
}
#endif
inline void spectra_p::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spectra_p.file_name)
}
inline void spectra_p::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spectra_p.file_name)
}
inline ::std::string* spectra_p::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:spectra_p.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* spectra_p::release_file_name() {
  // @@protoc_insertion_point(field_release:spectra_p.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void spectra_p::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:spectra_p.file_name)
}

// string spectra_name = 2;
inline void spectra_p::clear_spectra_name() {
  spectra_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& spectra_p::spectra_name() const {
  // @@protoc_insertion_point(field_get:spectra_p.spectra_name)
  return spectra_name_.GetNoArena();
}
inline void spectra_p::set_spectra_name(const ::std::string& value) {
  
  spectra_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spectra_p.spectra_name)
}
#if LANG_CXX11
inline void spectra_p::set_spectra_name(::std::string&& value) {
  
  spectra_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spectra_p.spectra_name)
}
#endif
inline void spectra_p::set_spectra_name(const char* value) {
  
  spectra_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spectra_p.spectra_name)
}
inline void spectra_p::set_spectra_name(const char* value, size_t size) {
  
  spectra_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spectra_p.spectra_name)
}
inline ::std::string* spectra_p::mutable_spectra_name() {
  
  // @@protoc_insertion_point(field_mutable:spectra_p.spectra_name)
  return spectra_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* spectra_p::release_spectra_name() {
  // @@protoc_insertion_point(field_release:spectra_p.spectra_name)
  
  return spectra_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void spectra_p::set_allocated_spectra_name(::std::string* spectra_name) {
  if (spectra_name != NULL) {
    
  } else {
    
  }
  spectra_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spectra_name);
  // @@protoc_insertion_point(field_set_allocated:spectra_p.spectra_name)
}

// repeated .peak_p ions = 3;
inline int spectra_p::ions_size() const {
  return ions_.size();
}
inline void spectra_p::clear_ions() {
  ions_.Clear();
}
inline const ::peak_p& spectra_p::ions(int index) const {
  // @@protoc_insertion_point(field_get:spectra_p.ions)
  return ions_.Get(index);
}
inline ::peak_p* spectra_p::mutable_ions(int index) {
  // @@protoc_insertion_point(field_mutable:spectra_p.ions)
  return ions_.Mutable(index);
}
inline ::peak_p* spectra_p::add_ions() {
  // @@protoc_insertion_point(field_add:spectra_p.ions)
  return ions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::peak_p >*
spectra_p::mutable_ions() {
  // @@protoc_insertion_point(field_mutable_list:spectra_p.ions)
  return &ions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::peak_p >&
spectra_p::ions() const {
  // @@protoc_insertion_point(field_list:spectra_p.ions)
  return ions_;
}

// -------------------------------------------------------------------

// ms_data

// repeated int32 idxes = 1;
inline int ms_data::idxes_size() const {
  return idxes_.size();
}
inline void ms_data::clear_idxes() {
  idxes_.Clear();
}
inline ::google::protobuf::int32 ms_data::idxes(int index) const {
  // @@protoc_insertion_point(field_get:ms_data.idxes)
  return idxes_.Get(index);
}
inline void ms_data::set_idxes(int index, ::google::protobuf::int32 value) {
  idxes_.Set(index, value);
  // @@protoc_insertion_point(field_set:ms_data.idxes)
}
inline void ms_data::add_idxes(::google::protobuf::int32 value) {
  idxes_.Add(value);
  // @@protoc_insertion_point(field_add:ms_data.idxes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ms_data::idxes() const {
  // @@protoc_insertion_point(field_list:ms_data.idxes)
  return idxes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ms_data::mutable_idxes() {
  // @@protoc_insertion_point(field_mutable_list:ms_data.idxes)
  return &idxes_;
}

// repeated .spectra_p data = 2;
inline int ms_data::data_size() const {
  return data_.size();
}
inline void ms_data::clear_data() {
  data_.Clear();
}
inline const ::spectra_p& ms_data::data(int index) const {
  // @@protoc_insertion_point(field_get:ms_data.data)
  return data_.Get(index);
}
inline ::spectra_p* ms_data::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ms_data.data)
  return data_.Mutable(index);
}
inline ::spectra_p* ms_data::add_data() {
  // @@protoc_insertion_point(field_add:ms_data.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::spectra_p >*
ms_data::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ms_data.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::spectra_p >&
ms_data::data() const {
  // @@protoc_insertion_point(field_list:ms_data.data)
  return data_;
}

// -------------------------------------------------------------------

// assignment

// int32 num_proc = 1;
inline void assignment::clear_num_proc() {
  num_proc_ = 0;
}
inline ::google::protobuf::int32 assignment::num_proc() const {
  // @@protoc_insertion_point(field_get:assignment.num_proc)
  return num_proc_;
}
inline void assignment::set_num_proc(::google::protobuf::int32 value) {
  
  num_proc_ = value;
  // @@protoc_insertion_point(field_set:assignment.num_proc)
}

// repeated .ms_data multi_dataset = 2;
inline int assignment::multi_dataset_size() const {
  return multi_dataset_.size();
}
inline void assignment::clear_multi_dataset() {
  multi_dataset_.Clear();
}
inline const ::ms_data& assignment::multi_dataset(int index) const {
  // @@protoc_insertion_point(field_get:assignment.multi_dataset)
  return multi_dataset_.Get(index);
}
inline ::ms_data* assignment::mutable_multi_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:assignment.multi_dataset)
  return multi_dataset_.Mutable(index);
}
inline ::ms_data* assignment::add_multi_dataset() {
  // @@protoc_insertion_point(field_add:assignment.multi_dataset)
  return multi_dataset_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ms_data >*
assignment::mutable_multi_dataset() {
  // @@protoc_insertion_point(field_mutable_list:assignment.multi_dataset)
  return &multi_dataset_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ms_data >&
assignment::multi_dataset() const {
  // @@protoc_insertion_point(field_list:assignment.multi_dataset)
  return multi_dataset_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_assignment_2eproto__INCLUDED
